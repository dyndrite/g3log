def version
pipeline {
    agent {
        label 'windows'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '25'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
        timestamps()
        timeout(time: 180, unit: 'MINUTES')
        ansiColor('xterm')
    }
    libraries {
        lib("global-libs@2.6.0")
    }
    stages {
        stage ('Slack Notifier') {
            steps {
                checkout scm
                script {
                    slackSendDyndrite message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "#jenkins-dev-dependencies"
                    version = versionFromTextFile file: "version.txt"
                    version = version.trim()
                }
            }
        }
        stage ('G3Log Conan Ubuntu 20.04 GCC') {
            matrix {
                axes {
                    axis {
                        name 'compiler_version'
                        values 'gcc-7'
                    }
                    axis {
                        name 'docker_node'
                        values 'linux_docker'
                    }
                }
                stages {
                    stage("Build and Push Conan Pkg") {
                        steps {
                            throttle(['CorazonBuild']) {
                                node("${docker_node}") {
                                    script {
                                        cleanWs()
                                        checkout scm
                                        echo "Building G3log Conan package ${compiler_version} on node ${NODE_NAME}."
                                        withEnv(["BRANCH_NAME=${env.BRANCH_NAME}", "CONAN_USER_HOME=${WORKSPACE}", "CONAN_NON_INTERACTIVE=1", "CONAN_REVISIONS_ENABLED=1", "CONAN_SCM_TO_CONANDATA=1"]) {
                                            docker.withRegistry('', 'docker-access') {
                                                docker.image("dyndrite/corazon-ubuntu20.04-cuda11.6:${compiler_version}").inside("--runtime=nvidia") {
                                                    localConanClientID = conanArtifactoryConnection()
                                                    rtConanRun (
                                                        clientId: localConanClientID,
                                                        command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/${compiler_version} -s build_type=Release"
                                                    )
                                                    rtConanRun (
                                                        clientId: localConanClientID,
                                                        command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/${compiler_version} -s build_type=Debug"
                                                    )
                                                    if(env.BRANCH_NAME == 'master') {
                                                        rtConanRun (
                                                            clientId: localConanClientID,
                                                            command: "upload dynd-g3log/* --remote dyndConanProdLocal --all --confirm"
                                                        )
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage ('G3Log Conan Ubuntu 20.04 Clang') {
            matrix {
                axes {
                    axis {
                        name 'compiler_version'
                        values 'clang-10'
                    }
                    axis {
                        name 'docker_node'
                        values 'linux_docker'
                    }
                }
                stages {
                    stage("Build and Push Conan Pkg") {
                        steps {
                            throttle(['CorazonBuild']) {
                                node("${docker_node}") {
                                    script {
                                        cleanWs()
                                        checkout scm
                                        echo "Building G3Log Conan package ${compiler_version} on node ${NODE_NAME}."
                                        withEnv(["BRANCH_NAME=${env.BRANCH_NAME}", "CONAN_USER_HOME=${WORKSPACE}", "CONAN_NON_INTERACTIVE=1", "CONAN_REVISIONS_ENABLED=1", "CONAN_SCM_TO_CONANDATA=1"]) {
                                            docker.withRegistry('', 'docker-access') {
                                                docker.image("dyndrite/corazon-ubuntu20.04-cuda11.6:${compiler_version}").inside("--runtime=nvidia") {
                                                    localConanClientID = conanArtifactoryConnection()
                                                    rtConanRun (
                                                        clientId: localConanClientID,
                                                        command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/${compiler_version} -s build_type=Release"
                                                    )
                                                    rtConanRun (
                                                        clientId: localConanClientID,
                                                        command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/${compiler_version} -s build_type=Debug"
                                                    )
                                                    if(env.BRANCH_NAME == 'master') {
                                                        rtConanRun (
                                                            clientId: localConanClientID,
                                                            command: "upload dynd-g3log/* --remote dyndConanProdLocal --all --confirm"
                                                        )
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage ('G3Log Conan Ubuntu 22.04 GCC') {
            matrix {
                axes {
                    axis {
                        name 'compiler_version'
                        values 'gcc-9', 'gcc-10', 'gcc-11', 'gcc-12'
                    }
                    axis {
                        name 'docker_node'
                        values 'linux_docker'
                    }
                }
                stages {
                    stage("Build and Push Conan Pkg") {
                        steps {
                            throttle(['CorazonBuild']) {
                                node("${docker_node}") {
                                    script {
                                        cleanWs()
                                        checkout scm
                                        echo "Building G3log Conan package ${compiler_version} on node ${NODE_NAME}."
                                        withEnv(["BRANCH_NAME=${env.BRANCH_NAME}", "CONAN_USER_HOME=${WORKSPACE}", "CONAN_NON_INTERACTIVE=1", "CONAN_REVISIONS_ENABLED=1", "CONAN_SCM_TO_CONANDATA=1"]) {
                                            docker.withRegistry('', 'docker-access') {
                                                docker.image("dyndrite/corazon-ubuntu22.04-cuda12.0:${compiler_version}").inside("--runtime=nvidia") {
                                                    localConanClientID = conanArtifactoryConnection()
                                                    rtConanRun (
                                                        clientId: localConanClientID,
                                                        command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/${compiler_version} -s build_type=Release"
                                                    )
                                                    rtConanRun (
                                                        clientId: localConanClientID,
                                                        command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/${compiler_version} -s build_type=Debug"
                                                    )
                                                    if(env.BRANCH_NAME == 'master') {
                                                        rtConanRun (
                                                            clientId: localConanClientID,
                                                            command: "upload dynd-g3log/* --remote dyndConanProdLocal --all --confirm"
                                                        )
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage ('G3Log Conan Ubuntu 22.04 Clang') {
            matrix {
                axes {
                    axis {
                        name 'compiler_version'
                        values 'clang-11', 'clang-12', 'clang-13', 'clang-14', 'clang-15', 'clang-16'
                    }
                    axis {
                        name 'docker_node'
                        values 'linux_docker'
                    }
                }
                stages {
                    stage("Build and Push Conan Pkg") {
                        steps {
                            throttle(['CorazonBuild']) {
                                node("${docker_node}") {
                                    script {
                                        cleanWs()
                                        checkout scm
                                        echo "Building G3Log Conan package ${compiler_version} on node ${NODE_NAME}."
                                        withEnv(["BRANCH_NAME=${env.BRANCH_NAME}", "CONAN_USER_HOME=${WORKSPACE}", "CONAN_NON_INTERACTIVE=1", "CONAN_REVISIONS_ENABLED=1", "CONAN_SCM_TO_CONANDATA=1"]) {
                                            docker.withRegistry('', 'docker-access') {
                                                docker.image("dyndrite/corazon-ubuntu22.04-cuda12.0:${compiler_version}").inside("--runtime=nvidia") {
                                                    localConanClientID = conanArtifactoryConnection()
                                                    rtConanRun (
                                                        clientId: localConanClientID,
                                                        command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/${compiler_version} -s build_type=Release"
                                                    )
                                                    rtConanRun (
                                                        clientId: localConanClientID,
                                                        command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/${compiler_version} -s build_type=Debug"
                                                    )
                                                    if(env.BRANCH_NAME == 'master') {
                                                        rtConanRun (
                                                            clientId: localConanClientID,
                                                            command: "upload dynd-g3log/* --remote dyndConanProdLocal --all --confirm"
                                                        )
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('G3log Conan VS19') {
            agent {
                label 'dev-env-20201110-windows'
            }
            steps {
                cleanWs()
                checkout scm
                echo "BuildNode ${NODE_NAME}"
                script {
                    withEnv(["BRANCH_NAME=${env.BRANCH_NAME}", "CONAN_USER_HOME=${WORKSPACE}", "CONAN_NON_INTERACTIVE=1", "CONAN_REVISIONS_ENABLED=1", "CONAN_SCM_TO_CONANDATA=1"]) {
                        localConanClientID = conanArtifactoryConnection()
                        rtConanRun (
                            clientId: localConanClientID,
                            command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/visual_studio_19 -s build_type=Release"
                        )
                        rtConanRun (
                            clientId: localConanClientID,
                            command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/visual_studio_19 -s build_type=Debug"
                        )
                        if(env.BRANCH_NAME == 'master') {
                            rtConanRun (
                                clientId: localConanClientID,
                                command: "upload dynd-g3log/* --remote dyndConanProdLocal --all --confirm"
                            )
                        }
                    }
                }
            }
        }
        stage('G3log Conan VS22') {
            agent {
                label 'dev-env-20230103-windows'
            }
            steps {
                cleanWs()
                checkout scm
                echo "BuildNode ${NODE_NAME}"
                script {
                    withEnv(["BRANCH_NAME=${env.BRANCH_NAME}", "CONAN_USER_HOME=${WORKSPACE}", "CONAN_NON_INTERACTIVE=1", "CONAN_REVISIONS_ENABLED=1", "CONAN_SCM_TO_CONANDATA=1"]) {
                        localConanClientID = conanArtifactoryConnection()
                        rtConanRun (
                            clientId: localConanClientID,
                            command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/visual_studio_22 -s build_type=Release"
                        )
                        rtConanRun (
                            clientId: localConanClientID,
                            command: "create conan_recipe/all/conanfile.py dynd-g3log/${version}@dyndrite/stable -pr=conan_recipe/profiles/visual_studio_22 -s build_type=Debug"
                        )
                        if(env.BRANCH_NAME == 'master') {
                            rtConanRun (
                                clientId: localConanClientID,
                                command: "upload dynd-g3log/* --remote dyndConanProdLocal --all --confirm"
                            )
                        }
                    }
                }
            }
        }
        stage ('Auto-Tag Repository') {
            when {
                allOf {
                    changeset 'version.txt'
                    branch 'master'
                }
                beforeAgent true
            }
            steps {
                script {
                    buildDescription "${version}"
                    gitTag credential_id: 'c0161a12-51d0-4949-b8f8-04cb78337c8f', git_tag: "${version}"
                }
            }
        }
    }
    post {
        failure {
            script {
                slackSendDyndrite color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "#jenkins-dev-dependencies"
            }
        }
        success {
            script {
                slackSendDyndrite channel: "#jenkins-dev-dependencies"
                rtPublishBuildInfo (
                    serverId: "artifactory-local"
                )
            }
        }
        aborted {
            script {
                slackSendDyndrite color: '#FF0000', message: "ABORTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "#jenkins-dev-dependencies"
            }
        }
    }
}